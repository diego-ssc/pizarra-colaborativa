### Redis endpoint
REDIS=redis://localhost:6379
# REDIS_PREFIX=y # by default "y:" is prepended to all used redis keys

### y-redis server component
# PORT=3002 # The port that is used for listening for websocket connections

### Storage provider
## Either setup Postgres or S3 to persist data. If S3 is set up, then the
## postgres config is not used.

## S3 configuration for minio (start with `npm run minio`)
S3_ENDPOINT=localhost
S3_PORT=9000
S3_SSL=false
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin

## PostgreSQL connection string format: postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
# POSTGRES=postgres://user:pass@localhost/database
# POSTGRES_TESTDB=yredis_tests ## use a different database for testing

### Auth signature
## The auth server authenticates web clients using json-web-tokens (jwt). 
## They are generated and validated using the following json-web-keys (jwk).
## Generate your own keys by calling: `npx 0ecdsa-generate-keypair --name auth`
## These keys should be kept secret!
AUTH_PUBLIC_KEY=..
AUTH_PRIVATE_KEY=..

### Auth backend
## This REST endpoint is called to check whether a user has access to a document. It
## is provided by you. However, there are multiple sample implementations in this
## repository.
AUTH_PERM_CALLBACK=http://localhost:5173/auth/perm

### Optional change callback
## This REST endpoint is called in regular intervals when a ydoc is changed.
## Remove this if you don't need it.
YDOC_UPDATE_CALLBACK=http://localhost:5173/ydoc
 
### Logging
## Configure what you want to log. LOG is a regular expression that is applied
## to the logged component.
LOG=* # log everything
# LOG="" # no logging
# LOG="^(yjs|@y)" # Supports regexes
# LOG=@y/redis # print all messages generated by y-redis
# LOG=@y/redis/[componentname] - print only messages from a specific y-redis component

### Expert configurations
## For debugging purposes and expert use.
## Changing these variables can be very dangerous. The default is carefully
## chosen. Be sure that you know what you are doing!
##
## Redis messages exist for at least one minute on the redis stream
# REDIS_MIN_MESSAGE_LIFETIME=60000
## After this timeout, a new worker will pick up the task
# REDIS_TASK_TIMEOUT=600000
